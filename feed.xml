<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.sivaram.co.in/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.sivaram.co.in/" rel="alternate" type="text/html" /><updated>2022-12-10T16:05:34+00:00</updated><id>https://blog.sivaram.co.in/feed.xml</id><title type="html">Sivaram’s Blog</title><subtitle>Blogging about programming, databases, performance optimization, and other stuff
</subtitle><author><name>Sivarama Subramanian</name><email>sivaraam1024+ghblog@gmail.com</email></author><entry><title type="html">The curious case of missing stack traces</title><link href="https://blog.sivaram.co.in/2022/10/04/missing-stack-trace.html" rel="alternate" type="text/html" title="The curious case of missing stack traces" /><published>2022-10-04T05:15:01+00:00</published><updated>2022-10-04T05:15:01+00:00</updated><id>https://blog.sivaram.co.in/2022/10/04/missing-stack-trace</id><content type="html" xml:base="https://blog.sivaram.co.in/2022/10/04/missing-stack-trace.html"><![CDATA[<p>In this post, we will see about a weird issue that I came across with missing Java stack traces, how I overcame it, and the learnings from it.
<!--more--></p>
<h3 id="the-issue">The issue</h3>
<p>A few days back, a co-worker came to me with a strange issue; While debugging an issue using logs, he came across a few logs where Exceptions were printed but there was no stack trace.</p>

<p>So to be clear, the exception messages were there but the stack traces with the call tree, file name, line number, etc were all missing.</p>

<h3 id="debugging">Debugging</h3>
<p>At first, I thought it must be a cause of erroneous logging, Log4j has many overloaded methods to log messages and it is easy to miss the correct method to log exceptions with the stack trace.</p>

<p>But in this case, we checked the code and it was using the <a href="https://logging.apache.org/log4j/2.x/log4j-api/apidocs/org/apache/logging/log4j/Logger.html#info-org.apache.logging.log4j.Marker-java.lang.Object-java.lang.Throwable-">correct method</a> and passing the exception object as a parameter.</p>

<p>Then I vaguely remembered reading about something similar in a <a href="https://www.javaspecialists.eu/archive/">Java Specialists</a> Newsletter. After a quick Google search, we found this <a href="https://www.javaspecialists.eu/archive/Issue187-Cost-of-Causing-Exceptions.html">article</a> that speaks about this behavior.</p>

<p>To quote from the article,</p>
<blockquote>
  <p>After a relatively short while, it began returning the same exception instance, with an empty stack trace. You might have seen empty stack traces in your logs. <strong>This is why they occur. Too many exceptions are happening too closely together and eventually the server HotSpot compiler optimizes the code</strong> to deliver a single instance back to the user.</p>
</blockquote>

<h3 id="the-fix">The fix</h3>
<p>Hotspot VM removes the stack trace for performance optimization when too many exceptions occur in a short period. Now that we know this, we need to find a way to get the original trace.</p>

<p>As per JDK 5 <a href="https://www.oracle.com/java/technologies/javase/release-notes-introduction.html#vm">release notes</a>, We can pass the flag <code class="language-plaintext highlighter-rouge">-XX:-OmitStackTraceInFastThrow</code> to the JVM to disable this optimization, but we didn’t have the choice of changing the flag and restarting the JVM.</p>

<p>JVM prints the trace for the first few exceptions, the optimization kicks in only when the exceptions are frequent, so we filtered the logs for the particular machine and sorted the exception logs from old to new, and there it was! the complete trace with the call tree and source line info etc.</p>

<h3 id="learnings">Learnings</h3>
<p>The issue was fixed, but I became curious about why this optimization was done by Hotspot and how it was done.
Going back to that article from JavaSpecialists Newsletter, we can understand that creating Throwable objects and filling them with stack traces is expensive, especially when these exceptions occur at a high rate.</p>

<p>So Hotspot bypasses this expensive operation and returns a preallocated Exception object for all the calls, but this optimization is only applicable for ‘known’ exceptions like <code class="language-plaintext highlighter-rouge">NullPointerException</code>, <code class="language-plaintext highlighter-rouge">ArrayIndexOutOfBoundsException</code>, etc.</p>

<p>If we need to optimize the object creation for custom Exceptions, we have to override <a href="https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/lang/Throwable.html#fillInStackTrace()">fillInStackTrace()</a> method in Throwable class. This method looks at the thread’s stack trace and fills it in the exception object. Since this might be expensive, for cases where we don’t need stack traces we can override this method and set stack trace to be empty.</p>

<p>Norman Maurer, one of the developers of Netty, has written a blog post analyzing the performance improvement of removing the stack trace - <a href="http://normanmaurer.me/blog/2013/11/09/The-hidden-performance-costs-of-instantiating-Throwables/" data-proofer-ignore="true">The hidden cost of instantiating throwables</a></p>

<p>Even though there are performance benefits to skipping the stack trace when instantiating Exceptions, we must keep in mind that Exceptions are for indicating an error or exceptional occurrence and should not be used for control flow. As such Exceptions may not be as useful without stack traces.</p>

<h3 id="references">References</h3>
<ol>
  <li><a href="https://www.javaspecialists.eu/archive/Issue187-Cost-of-Causing-Exceptions.html">Cost of Causing Exceptions - JavaSpecialists</a></li>
  <li><a href="http://normanmaurer.me/blog/2013/11/09/The-hidden-performance-costs-of-instantiating-Throwables/" data-proofer-ignore="true">The hidden cost of instantiating throwables - Norman Maurer’s Blog</a></li>
  <li><a href="https://www.javaspecialists.eu/archive/Issue129-Fast-Exceptions-in-RIFE.html">Fast Exceptions in RIFE - JavaSpecialists</a></li>
</ol>]]></content><author><name>Sivarama Subramanian</name><email>sivaraam1024+ghblog@gmail.com</email></author><category term="java" /><summary type="html"><![CDATA[This post describes about the issue of missing stack traces in Java programs.]]></summary></entry><entry><title type="html">Build and Debug Postgres using VS Code on a Mac</title><link href="https://blog.sivaram.co.in/2022/09/25/debugging-postgres-on-m1-mac.html" rel="alternate" type="text/html" title="Build and Debug Postgres using VS Code on a Mac" /><published>2022-09-25T05:15:01+00:00</published><updated>2022-09-25T05:15:01+00:00</updated><id>https://blog.sivaram.co.in/2022/09/25/debugging-postgres-on-m1-mac</id><content type="html" xml:base="https://blog.sivaram.co.in/2022/09/25/debugging-postgres-on-m1-mac.html"><![CDATA[<p>In this post, we will see how to build Postgres from the source code and debug it to trace through a simple
query execution using <a href="https://code.visualstudio.com/">Visual Studio Code</a> in a M1 Mac.
<!--more--></p>
<h3 id="dependencies">Dependencies</h3>
<p>Before starting make sure all the <a href="https://www.postgresql.org/docs/14/install-requirements.html">dependencies</a> are installed.
We will need,</p>
<ol>
  <li>Git</li>
  <li>GCC compiler</li>
  <li>make</li>
  <li>VS Code</li>
</ol>

<h3 id="build-and-install-postgres">Build and Install Postgres</h3>
<ol>
  <li>First we have to get the source code, we can clone the official Git repo,
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://git.postgresql.org/git/postgresql.git
</code></pre></div>    </div>
    <p>There is also a <a href="https://github.com/postgres/postgres">mirror</a> of the repository in Github. We can use any one of these, it would be fine.</p>
  </li>
  <li>After cloning the repo, cd into the folder ‘postgresql’. We can either build from the master branch or a release-specific branch.
For example, to build Postgres 14, we have to switch to ‘REL_14_STABLE’ branch.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout REL_14_STABLE <span class="o">&amp;&amp;</span> git pull
</code></pre></div>    </div>
  </li>
  <li>To configure the build, run the following command,
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./configure <span class="nt">--prefix</span><span class="o">=</span><span class="nv">$HOME</span>/postgres/pg14 <span class="nt">--enable-cassert</span> <span class="se">\</span>
<span class="nt">--enable-debug</span>  <span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">"-ggdb -O0 -fno-omit-frame-pointer"</span> <span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">"-g -O0"</span>
</code></pre></div>    </div>
    <ul>
      <li>prefix - folder where Postgres will be installed</li>
      <li>enable-cassert - Enable C Assert statements</li>
      <li>enable-debug - Enable Debug mode in build</li>
      <li>CFLAGS - C compiler flags
        <ul>
          <li>-O0 - disable optimisation</li>
          <li>-g - generate debug symbols</li>
        </ul>
      </li>
      <li>CPPFLAGS - C++ compiler flags
I have given postgres/pg14 folder under my HOME directory as installation location for this Postgres build.</li>
    </ul>
  </li>
  <li>‘configure’ script will do a few checks and configure the build, the output should end with something like
    <blockquote>
      <p>config.status: linking src/include/port/darwin.h to src/include/pg_config_os.h
config.status: linking src/makefiles/Makefile.darwin to src/Makefile.port</p>
    </blockquote>
  </li>
  <li>
    <p>‘configure’ would have created a ‘Makefile.global’ under ‘src’ directory, we need to check and make sure optimisations are disable, debug symbols are enabled in the build.
Open <code class="language-plaintext highlighter-rouge">src/Makefile.global</code> file and check CFLAGS and CPPFLAGS variables to see if they have <code class="language-plaintext highlighter-rouge">-g</code> and <code class="language-plaintext highlighter-rouge">-O0</code> flags.</p>
  </li>
  <li>
    <p>Run <code class="language-plaintext highlighter-rouge">make &amp;&amp; make install</code> to run the build and install the outputs to installation directory (<code class="language-plaintext highlighter-rouge">$HOME/postgres/pg14</code>)</p>
  </li>
  <li>After <code class="language-plaintext highlighter-rouge">make &amp;&amp; make install</code> succeeds, go to installation directory and check if the build has debug symbols
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$HOME</span>/postgres/pg14/bin
nm <span class="nt">-pa</span> ./postgres | <span class="nb">grep </span>OSO
</code></pre></div>    </div>
    <p><code class="language-plaintext highlighter-rouge">nm</code> is used to list the symbol table names in a binary. For PG14, nm returned around 747 entires.
If you do not find any symbol table entries, or the entries are low, make sure you disabled optimisation in Makefile. If you missed it, add <code class="language-plaintext highlighter-rouge">-O0</code> in Makefile.global, run <code class="language-plaintext highlighter-rouge">make clean</code> and then repeat <code class="language-plaintext highlighter-rouge">make &amp;&amp; make install</code></p>
  </li>
  <li>Initialize a PGDATA folder for the database using <code class="language-plaintext highlighter-rouge">initdb</code>, I’m using <code class="language-plaintext highlighter-rouge">$HOME/postgres/pgdata</code> as my data directory,
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$HOME</span>/postgres/pg14/bin/initdb <span class="nt">-D</span> <span class="nv">$HOME</span>/postgres/pgdata
</code></pre></div>    </div>
    <p>You should an output similar to this,</p>
    <blockquote>
      <p>Success. You can now start the database server using:</p>

      <p>/Users/me/postgres/pg14/bin/pg_ctl -D /Users/me/postgres/pgdata -l logfile start</p>
    </blockquote>
  </li>
  <li>(Optional) You can now edit and customize the <code class="language-plaintext highlighter-rouge">postgresql.conf</code> file.
I usually change the postgres port to 5433 so that I can keep running a normal non-debug database at 5432 for other purposes.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code <span class="nv">$HOME</span>/postgres/pgdata/postgresql.conf
</code></pre></div>    </div>
  </li>
  <li>Now we can start the Database,
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$HOME</span>/postgres/pg14/bin/pg_ctl <span class="nt">-D</span> <span class="nv">$HOME</span>/postgres/pgdata <span class="nt">-l</span> logfile start
</code></pre></div>    </div>
    <p>We should see this output,</p>
    <blockquote>
      <p>waiting for server to start…. done <br />
server started</p>
    </blockquote>
  </li>
  <li>We can create a db and login run a simple query.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$HOME</span>/postgres/pg14/bin/createdb <span class="nt">-p</span> 5433 sample
<span class="nv">$HOME</span>/postgres/pg14/bin/psql <span class="nt">-p</span> 5433 sample
</code></pre></div>    </div>
    <p>We should be logged into the psql console now, we can try to create a sample table an run some queries.</p>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">table</span> <span class="n">hello</span><span class="p">(</span><span class="n">id</span> <span class="nb">int</span><span class="p">,</span> <span class="n">message</span> <span class="nb">text</span><span class="p">);</span>
<span class="k">insert</span> <span class="k">into</span> <span class="n">hello</span> <span class="k">values</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'Hello world!'</span><span class="p">);</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">hello</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="debug-postgres-in-vs-code">Debug Postgres in VS Code</h3>
<p>Now that we have a running postgres server, lets start debugging it.</p>
<ol>
  <li>
    <p>Open the Postgres source code in VS code and create a <a href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations">launch.json</a> file.</p>
  </li>
  <li>Add launch configuration to attach to the postgres process, for example
    <div class="language-jsonc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
 </span><span class="c1">// Use IntelliSense to learn about possible attributes.</span><span class="w">
 </span><span class="c1">// Hover to view descriptions of existing attributes.</span><span class="w">
 </span><span class="c1">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><span class="w">
 </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
     </span><span class="p">{</span><span class="w">
         </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"(lldb) Attach DB"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"attach"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${env:HOME}/postgres/pg14/bin/postgres"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"MIMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lldb"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"targetArchitecture"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arm64"</span><span class="w">
     </span><span class="p">},</span><span class="w">
 </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
    <p>Make sure the <code class="language-plaintext highlighter-rouge">targetArchitecture</code> is set to arm64 for M1 macs. <code class="language-plaintext highlighter-rouge">program</code> must point to the <code class="language-plaintext highlighter-rouge">postgres</code> binary under <code class="language-plaintext highlighter-rouge">bin/</code> in our installation directory.</p>
  </li>
  <li>Now login to the database via psql in a terminal and find the postgres backend Process ID. Keep this terminal open for later use,
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$HOME</span>/postgres/pg14/bin/psql <span class="nt">-p</span> 5433 sample
</code></pre></div>    </div>
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">pg_backend_pid</span><span class="p">();</span>
</code></pre></div>    </div>
    <p><a href="https://www.postgresql.org/docs/9.4/functions-info.html">pg_backend_pid()</a> is a system function that returns the process id of the postgres backend for the current session.</p>
    <blockquote>
      <p>pg_backend_pid <br />
—————-<br />
         11340<br />
(1 row)</p>
    </blockquote>
  </li>
  <li>
    <p>Create a breakpoint in any function, I use <code class="language-plaintext highlighter-rouge">exec_simple_query</code> in <code class="language-plaintext highlighter-rouge">src/backend/tcop/postgres.c</code> this is where the query execution starts.</p>
  </li>
  <li>
    <p>Now, Start Debugging (Press <code class="language-plaintext highlighter-rouge">F5</code> or <code class="language-plaintext highlighter-rouge">Run and Debug</code> -&gt; <code class="language-plaintext highlighter-rouge">(lldb) Attach DB</code>), it will ask for a pid, paste the pg_backend_pid that we got from the psql terminal.</p>
  </li>
  <li>Once debugger is ready, go back to the same <code class="language-plaintext highlighter-rouge">psql</code> terminal and run a SQL query, like
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">hello</span><span class="p">;</span>
</code></pre></div>    </div>
    <p>The VS code breakpoint will get triggered now, from here you can view the variables and do normal step debugging</p>
  </li>
</ol>

<!-- {:refdef: style="text-align: center;"} -->

<p><img src="/assets/resized/1400/vs-code-pg-debugging.webp" alt="Debugging PG in VS Code" title="Debugging PG in VS Code" srcset="    /assets/resized/480/vs-code-pg-debugging.webp 480w,    /assets/resized/800/vs-code-pg-debugging.webp 800w,    /assets/resized/1400/vs-code-pg-debugging.webp 1400w, /assets/vs-code-pg-debugging.webp 2928w" />
<!-- {: refdef} --></p>

<p>Thats it we can trace the flow of query execution within Postgres.
Let me know in the comments if you face any issue.</p>

<p>In the next post, we will see the various stages of query execution in postgres and its internal workings.</p>

<h3 id="references">References</h3>
<ol>
  <li><a href="https://www.postgresql.org/docs/14/install-procedure.html">https://www.postgresql.org/docs/14/install-procedure.html</a></li>
  <li><a href="https://www.postgresql.org/docs/14/functions-info.html#id-1.5.8.32.4.2.2.11.1.1.1">https://www.postgresql.org/docs/14/functions-info.html</a></li>
</ol>]]></content><author><name>Sivarama Subramanian</name><email>sivaraam1024+ghblog@gmail.com</email></author><category term="postgres" /><category term="how-to" /><summary type="html"><![CDATA[This post explains how to build Postgres from Source code and debug it using VS Code.]]></summary></entry><entry><title type="html">Why don’t we use Ternary Search?</title><link href="https://blog.sivaram.co.in/2022/07/30/ternary-search.html" rel="alternate" type="text/html" title="Why don’t we use Ternary Search?" /><published>2022-07-30T05:35:01+00:00</published><updated>2022-07-30T05:35:01+00:00</updated><id>https://blog.sivaram.co.in/2022/07/30/ternary-search</id><content type="html" xml:base="https://blog.sivaram.co.in/2022/07/30/ternary-search.html"><![CDATA[<p>Before answering the question in the title, let’s see a bit about Binary Search.</p>

<p>Binary Search is one of the most basic algorithms that every programmer learns. The gist of it is simple.
<!--more-->
To search for an element in a sorted array, compare the search key with the middle element.</p>
<ul>
  <li>If both are the same, we have found the element.</li>
  <li>Else if the key is lesser than the middle element, Repeat the search in the left subarray.</li>
  <li>Else repeat the search in the right subarray.</li>
  <li>if there is no such subarray to search then the element does not exist in this array.</li>
</ul>

<!-- {:refdef: style="text-align: center;"} -->

<p><img src="/" alt="Visualization of Binary search" title="binary search in action" srcset=" /assets/binary-search-gif.webp 400w" />
<!-- {: refdef} --></p>

<h3 id="why-is-binary-search-efficient">Why is Binary search efficient?</h3>
<p>The algorithm is simple and with each comparison, we are cutting the search space in half.</p>

<p>This quickly adds up; to search an array with a million elements, we will need at most just 20 such comparisons.
Compare this to the million comparisons we would need if we took the naive approach of checking each element till we find the one we are searching for.</p>

<p><img src="/assets/resized/1400/n-vs-log2n.webp" alt="n vs log2(n) comparison" title="Comparing linear and Binary search" srcset="    /assets/resized/480/n-vs-log2n.webp 480w,    /assets/resized/800/n-vs-log2n.webp 800w,    /assets/resized/1400/n-vs-log2n.webp 1400w, /assets/n-vs-log2n.webp 3000w" /></p>

<h3 id="ternary-search-should-be-better-right">Ternary Search should be better, right?</h3>
<p>At each level, Instead of cutting the search space in half (50%) what if we narrowed it down to just (33%) by splitting the array into 3 parts instead of 2?</p>

<p>It seems like ternary search should be more efficient than binary search, after all, O(log<sub>3</sub> (n)) should be faster than O (log<sub>2</sub> (n)) right?</p>

<p><img src="/assets/resized/1400/log2-vs-log3.webp" alt="log2(n) vs log3(n) comparison" title="Comparing log2(n) and log3(n)" srcset="    /assets/resized/480/log2-vs-log3.webp 480w,    /assets/resized/800/log2-vs-log3.webp 800w,    /assets/resized/1400/log2-vs-log3.webp 1400w, /assets/log2-vs-log3.webp 1601w" /></p>

<p>But there is a catch, in Binary search we need only one comparison at each level - we just compare the search key with the middle element -  but in Ternary search, we need 2 comparisons: compare with the element at index n/3 and then with the element at index 2*n/3.</p>

<p>So in reality the time complexity of Ternary Search is not <strong>log<sub>3</sub>(n)</strong> but <strong>2 * log<sub>3</sub>(n)</strong>.</p>

<p><img src="/assets/resized/1400/log2-vs-2log3.webp" alt="log2(n) vs 2log3(n) comparison" title="Comparing log2(n) and 2log3(n)" srcset="    /assets/resized/480/log2-vs-2log3.webp 480w,    /assets/resized/800/log2-vs-2log3.webp 800w,    /assets/resized/1400/log2-vs-2log3.webp 1400w, /assets/log2-vs-2log3.webp 1536w" /></p>

<p>Even though <i>2 * log<sub>3</sub>(n)</i> is still <em>O(log<sub>3</sub>(n))</em> as per Big-Oh notation, the constants have a real-world impact in this case.</p>

<table>
  <thead>
    <tr>
      <th>Split</th>
      <th>No. of Comparisons at each level</th>
      <th>Max Comparisons for searching in n elements (n = 1000)</th>
      <th>n = 10000</th>
      <th>n = 100000</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2</td>
      <td>1</td>
      <td>10</td>
      <td>14</td>
      <td>17</td>
    </tr>
    <tr>
      <td>3</td>
      <td>2</td>
      <td>13</td>
      <td>17</td>
      <td>21</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3</td>
      <td>15</td>
      <td>20</td>
      <td>25</td>
    </tr>
    <tr>
      <td>5</td>
      <td>4</td>
      <td>18</td>
      <td>23</td>
      <td>29</td>
    </tr>
    <tr>
      <td>6</td>
      <td>5</td>
      <td>20</td>
      <td>26</td>
      <td>33</td>
    </tr>
    <tr>
      <td>7</td>
      <td>6</td>
      <td>22</td>
      <td>29</td>
      <td>36</td>
    </tr>
  </tbody>
</table>

<p>As we can see from the table, Binary Search (Split 2) is better than Ternary Search (Split 3) or any other n-ary splits for searching a single element.</p>

<h2 id="why-is-binary-search-special">Why is binary search special?</h2>
<p>Because we and our computers are special and can compare only 2 elements at a time, if we could somehow compare three elements in a single operation, then ternary would be optimal.</p>

<p><a href="https://en.wikipedia.org/wiki/Ternary_search">Ternary Search</a> is not without its uses, a variation of the three-split search can be used for finding the max or min element in an array if the array has a single highest or lowest element.</p>]]></content><author><name>Sivarama Subramanian</name><email>sivaraam1024+ghblog@gmail.com</email></author><category term="why-dont-we" /><category term="searching" /><summary type="html"><![CDATA[Is Ternary search better than binary search? Why is it not popularly used?]]></summary></entry><entry><title type="html">Hello World!</title><link href="https://blog.sivaram.co.in/2022/07/24/hello-world.html" rel="alternate" type="text/html" title="Hello World!" /><published>2022-07-24T11:37:41+00:00</published><updated>2022-07-24T11:37:41+00:00</updated><id>https://blog.sivaram.co.in/2022/07/24/hello-world</id><content type="html" xml:base="https://blog.sivaram.co.in/2022/07/24/hello-world.html"><![CDATA[<p>Hello World! This is my first blog post.</p>

<p>In this post we’ll just be testing if I have setup the blog properly.
So if you want to read something more interesting checkout my <a href="/">latest blogs</a> or you can stay with me so I don’t have to test this all alone.</p>

<h3 id="code-snippets">Code Snippets</h3>

<p>Let’s check if code snippets are working properly.</p>

<p>I am a <a href="https://go.dev/blog/gopher">Gopher</a>, I fell in love with <a href="https://go.dev/">Golang</a> at my first job where we used it to build micro-services, I will be rooting for <code class="language-plaintext highlighter-rouge">Go</code> wherever I go, so lets start with that…</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span> <span class="n">main</span><span class="p">(){</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Hello World!!"</span><span class="p">)</span>
<span class="p">}</span>
<span class="c">// prints 'Hello World!!' to STDOUT.</span></code></pre></figure>

<p>Go is good for so many things but the Java &amp; JVM ecosystem contains a treasure trove of frameworks and libraries that have been built over the decades. I have extensively used Java in every one of my jobs and I will continue to use it and write about, let’s check that too…</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Hello</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)}{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello World!!"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// prints 'Hello World!!' to STDOUT.</span></code></pre></figure>

<p>The core purpose of all software applications is to Create, Read, and Modify data in some form or another. It all just boils down to this.</p>

<p>Modern Databases systems do a tremendous job of making these operations efficient. Especially the <a href="https://www.reddit.com/r/PostgreSQL/comments/jhe661/why_postgresql_has_13m_line_of_code/">1.3M LOC behemoth</a> called PostgreSQL, which is super-extensible and allows to add <a href="https://arctype.com/blog/postgresql-hooks/">hooks</a>, extensions and even control <a href="https://wiki.postgresql.org/wiki/Foreign_data_wrappers">how and where the data is stored</a>. 
As such I have been writing and analyzing SQL queries quite a bit so lets test that too.</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">messages</span><span class="p">(</span><span class="n">id</span> <span class="nb">int</span><span class="p">,</span> <span class="n">message</span> <span class="nb">text</span><span class="p">);</span>

<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">messages</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'Hello World!!'</span><span class="p">);</span>

<span class="k">SELECT</span> <span class="n">message</span> <span class="k">FROM</span> <span class="n">messages</span> <span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">-- prints 'Hello World!!' to STDOUT.</span></code></pre></figure>

<p>Now that we have tested the code snippets, lets try creating a Heading or have we already created <a href="#code-snippets">one</a>?</p>

<p>Did you just click on that link and then scroll back?</p>

<p><img src="/" alt="Why would you do that?" title="Why would you do that?" srcset=" /assets/why-would-you-do-that.webp 480w" /></p>

<p>Well, that should be enough for now. All I will be needing is code snippets, text, heading, links and images.
Thanks for testing this with me.</p>]]></content><author><name>Sivarama Subramanian</name><email>sivaraam1024+ghblog@gmail.com</email></author><category term="java" /><category term="go" /><category term="postgres" /><summary type="html"><![CDATA[Hello World! This is my first blog post.]]></summary></entry><entry><title type="html">BRIN index in Postgres</title><link href="https://blog.sivaram.co.in/2022/07/24/postgres-brin-index-optimization.html" rel="alternate" type="text/html" title="BRIN index in Postgres" /><published>2022-07-24T11:37:41+00:00</published><updated>2022-07-24T11:37:41+00:00</updated><id>https://blog.sivaram.co.in/2022/07/24/postgres-brin-index-optimization</id><content type="html" xml:base="https://blog.sivaram.co.in/2022/07/24/postgres-brin-index-optimization.html"><![CDATA[<p>One of the key features of Postgres is its ability to index data using many different types of indexes, each with its own set of benefits and drawbacks. One type of index that is particularly useful for large tables is the BRIN index. 
<!--more--></p>
<h3 id="what-are-brin-indexes">What are BRIN Indexes?</h3>
<p>BRIN stands for “Block Range INdex”. BRIN indexes work by dividing the table into blocks and storing the minimum and maximum values for each block. This allows Postgres to quickly identify which blocks contain the desired data and only scan those blocks, reducing the overall time and resources required for the query. This also allows the index to be much smaller in size, which makes it more efficient to use.</p>

<h3 id="when-should-we-use-brin-indexes">When should we use BRIN indexes?</h3>
<p>BRIN indexes are particularly useful for tables that have a large number of rows with a high degree of data correlation within blocks of pages. For example, a BRIN index would be well-suited for a column that contains time-series data, where each value represents a single point in time and the insertion order is correlated to the physical storage order, i.e., there won’t be many overlaps in min and max values between pages.</p>

<h3 id="creating-a-brin-index">Creating a BRIN index</h3>
<p>To create a BRIN index in Postgres, you can use the CREATE INDEX command. Here is an example of how to create a BRIN index on a table named my_table:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">my_index</span>
<span class="k">ON</span> <span class="n">my_table</span>
<span class="k">USING</span> <span class="n">BRIN</span> <span class="p">(</span><span class="n">column1</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="performance-comparison">Performance Comparison</h3>
<p>To compare the performance between Btree and BRIN indexes, we can create a table and fill it with some random data.</p>

<p>I used the following query to insert 10 million rows, this uses a few UDFs to generate random integers and timestamps.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">brin_test</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">i</span> <span class="k">as</span> <span class="n">id</span><span class="p">,</span>
     <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="mi">1</span><span class="p">.</span><span class="mi">5</span><span class="p">)::</span><span class="nb">int</span> <span class="k">as</span> <span class="n">strict_inc</span><span class="p">,</span>
    <span class="n">random_int_between</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10000000</span><span class="p">)</span> <span class="k">as</span> <span class="n">random</span><span class="p">,</span>
    <span class="n">random_int_between</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span> <span class="k">as</span> <span class="n">inc_with_fluctuations</span><span class="p">,</span>
    <span class="n">random_int_between</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">5000</span><span class="p">)</span> <span class="k">as</span> <span class="n">inc_with_large_flucts</span><span class="p">,</span>
    <span class="p">(</span><span class="s1">'2022-01-01'</span><span class="p">::</span><span class="nb">timestamp</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">interval</span> <span class="s1">'1 second'</span><span class="p">))</span> <span class="k">as</span> <span class="n">strict_inc_time</span><span class="p">,</span>
    <span class="n">random_time_between</span><span class="p">(</span><span class="s1">'1970-01-01'</span><span class="p">,</span> <span class="s1">'2022-01-01'</span><span class="p">)</span> <span class="k">as</span> <span class="n">random_time</span><span class="p">,</span>
    <span class="n">random_time_between</span><span class="p">(</span><span class="s1">'2022-01-01'</span><span class="p">::</span><span class="nb">timestamp</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">interval</span> <span class="s1">'1 second'</span><span class="p">),</span> <span class="s1">'2022-01-01'</span><span class="p">::</span><span class="nb">timestamp</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">interval</span> <span class="s1">'1 second'</span> <span class="o">+</span> <span class="n">interval</span> <span class="s1">'10 second'</span><span class="p">))</span> <span class="n">inc_time_with_fluctuations</span><span class="p">,</span>
    <span class="n">random_time_between</span><span class="p">(</span><span class="s1">'2022-01-01'</span><span class="p">::</span><span class="nb">timestamp</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">interval</span> <span class="s1">'1 second'</span><span class="p">),</span> <span class="s1">'2022-01-01'</span><span class="p">::</span><span class="nb">timestamp</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">interval</span> <span class="s1">'1 second'</span> <span class="o">+</span> <span class="n">interval</span> <span class="s1">'1 month'</span><span class="p">))</span> <span class="n">inc_time_with_large_flucts</span><span class="p">,</span>
    <span class="k">from</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10000000</span><span class="p">)</span> <span class="k">as</span> <span class="n">i</span>
<span class="p">);</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">strict_inc</code> and <code class="language-plaintext highlighter-rouge">strict_inc_time</code> have strictly increasing values but may contain duplicates.</li>
  <li><code class="language-plaintext highlighter-rouge">random</code> and <code class="language-plaintext highlighter-rouge">random_time</code> contain fully random values.</li>
  <li><code class="language-plaintext highlighter-rouge">inc_with_fluctuations</code> and <code class="language-plaintext highlighter-rouge">inc_time_with_fluctuations</code> contain generally increasing values with slight fluctuations.</li>
  <li><code class="language-plaintext highlighter-rouge">inc_with_large_flucts</code> and <code class="language-plaintext highlighter-rouge">inc_time_with_large_flucts</code> contain generally increasing values with large fluctuations.</li>
</ul>

<p>After data insertion, the table looks like this,</p>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>strict_inc</th>
      <th>random</th>
      <th>inc with_fluctations</th>
      <th>strict_inc_time                     </th>
      <th>random_time                     </th>
      <th>inc_time_with_fluctuations</th>
      <th>inc with_large_flucts</th>
      <th>inc_time_with_large_flucts</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>7909441</td>
      <td>2</td>
      <td>2022-01-01 00:00:01</td>
      <td>2017-04-24 21:08:09.98</td>
      <td>2022-01-01 00:00:10.77</td>
      <td>3741</td>
      <td>2022-01-19 23:31:36.72</td>
    </tr>
    <tr>
      <td>2</td>
      <td>3</td>
      <td>2654424</td>
      <td>5</td>
      <td>2022-01-01 00:00:02</td>
      <td>2014-10-27 20:32:44.45</td>
      <td>2022-01-01 00:00:08.86</td>
      <td>4568</td>
      <td>2022-01-18 08:14:47.08</td>
    </tr>
    <tr>
      <td>3</td>
      <td>5</td>
      <td>1617074</td>
      <td>4</td>
      <td>2022-01-01 00:00:03</td>
      <td>2001-09-28 23:49:05.66</td>
      <td>2022-01-01 00:00:12.68</td>
      <td>4847</td>
      <td>2022-01-22 08:10:27.84</td>
    </tr>
    <tr>
      <td>4</td>
      <td>6</td>
      <td>7145184</td>
      <td>7</td>
      <td>2022-01-01 00:00:04</td>
      <td>1973-08-10 17:16:05.11</td>
      <td>2022-01-01 00:00:11.9</td>
      <td>3630</td>
      <td>2022-01-06 07:04:08.76</td>
    </tr>
    <tr>
      <td>5</td>
      <td>8</td>
      <td>8897237</td>
      <td>7</td>
      <td>2022-01-01 00:00:05</td>
      <td>2012-12-26 03:56:10.39</td>
      <td>2022-01-01 00:00:09.65</td>
      <td>4341</td>
      <td>2022-01-22 13:38:50.03</td>
    </tr>
    <tr>
      <td>6</td>
      <td>9</td>
      <td>1357535</td>
      <td>9</td>
      <td>2022-01-01 00:00:06</td>
      <td>2004-09-10 10:14:19.94</td>
      <td>2022-01-01 00:00:13.54</td>
      <td>3571</td>
      <td>2022-01-01 16:28:10.77</td>
    </tr>
    <tr>
      <td>7</td>
      <td>11</td>
      <td>8036526</td>
      <td>7</td>
      <td>2022-01-01 00:00:07</td>
      <td>1976-04-18 13:52:20.69</td>
      <td>2022-01-01 00:00:11.67</td>
      <td>2159</td>
      <td>2022-01-30 05:03:33.79</td>
    </tr>
    <tr>
      <td>8</td>
      <td>12</td>
      <td>6248973</td>
      <td>8</td>
      <td>2022-01-01 00:00:08</td>
      <td>1988-03-27 00:46:22.00</td>
      <td>2022-01-01 00:00:12.15</td>
      <td>1202</td>
      <td>2022-01-24 00:41:01.77</td>
    </tr>
    <tr>
      <td>9</td>
      <td>14</td>
      <td>2993551</td>
      <td>10</td>
      <td>2022-01-01 00:00:09</td>
      <td>1990-06-07 14:07:25.84</td>
      <td>2022-01-01 00:00:14.64</td>
      <td>1120</td>
      <td>2022-01-12 00:54:51.17</td>
    </tr>
    <tr>
      <td>10</td>
      <td>15</td>
      <td>8377196</td>
      <td>11</td>
      <td>2022-01-01 00:00:10</td>
      <td>1983-01-19 04:26:23.50</td>
      <td>2022-01-01 00:00:19.99</td>
      <td>323</td>
      <td>2022-01-09 20:10:27.66</td>
    </tr>
  </tbody>
</table>

<p>In this table, I ran SELECT queries with both single values in the WHERE clause and also a range with BETWEEN … AND in the WHERE clause,</p>

<p>The query execution time (in milliseconds) for the various queries are,</p>

<table>
  <thead>
    <tr>
      <th>Query Type</th>
      <th>No index</th>
      <th>Btree</th>
      <th>BRIN</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Single Row Lookup on strictly increasing int</td>
      <td>239.246</td>
      <td>1.291</td>
      <td>2.629</td>
    </tr>
    <tr>
      <td>Single Row Lookup on random int</td>
      <td>229.026</td>
      <td>2.876</td>
      <td>2385.987</td>
    </tr>
    <tr>
      <td>Single Row Lookup on increasing int with fluctuations</td>
      <td>224.503</td>
      <td>12.302</td>
      <td>5.632</td>
    </tr>
    <tr>
      <td>Single Row Lookup on increasing int with large fluctuations</td>
      <td>381.571</td>
      <td>1.684</td>
      <td>2.542</td>
    </tr>
    <tr>
      <td>Single Row Lookup on strictly increasing timestamp</td>
      <td>268.229</td>
      <td>2.611</td>
      <td>0.271</td>
    </tr>
    <tr>
      <td>Single Row Lookup on random timestamp</td>
      <td>254.684</td>
      <td>2.582</td>
      <td>1355.999</td>
    </tr>
    <tr>
      <td>Single Row Lookup on increasing timestamp with fluctuations</td>
      <td>286.124</td>
      <td>3.473</td>
      <td>0.303</td>
    </tr>
    <tr>
      <td>Single Row Lookup on increasing timestamp with large fluctuations</td>
      <td>385.281</td>
      <td>0.133</td>
      <td>155.888</td>
    </tr>
    <tr>
      <td>Range query on strictly increasing int</td>
      <td>269.887</td>
      <td>55.806</td>
      <td>2.464</td>
    </tr>
    <tr>
      <td>Range query on random int</td>
      <td>303.607</td>
      <td>69.201</td>
      <td>223.032</td>
    </tr>
    <tr>
      <td>Range query on increasing int with fluctuations</td>
      <td>256.515</td>
      <td>55.493</td>
      <td>4.731</td>
    </tr>
    <tr>
      <td>Range query on increasing int with large fluctuations</td>
      <td>388.501</td>
      <td>27.386</td>
      <td>51.219</td>
    </tr>
    <tr>
      <td>Range query on strictly increasing timestamp</td>
      <td>272.902</td>
      <td>58.897</td>
      <td>59.066</td>
    </tr>
    <tr>
      <td>Range query on random timestamp</td>
      <td>280.474</td>
      <td>7.231</td>
      <td>374.964</td>
    </tr>
    <tr>
      <td>Range query on increasing timestamp with fluctuations</td>
      <td>299.144</td>
      <td>58.038</td>
      <td>65.234</td>
    </tr>
    <tr>
      <td>Range query on increasing timestamp with large fluctuations</td>
      <td>2045.531</td>
      <td>52.623</td>
      <td>498.498</td>
    </tr>
  </tbody>
</table>

<p>From the results, we can see,</p>
<ul>
  <li>Btree provides consistent performance regardless of data order.</li>
  <li>BRIN index performs best when the data is strictly increasing or when the data has only slight fluctuations. It is 2x better on single-row queries and up to 25x faster on range queries.</li>
  <li>BRIN is 500-1000x slower than Btree when data is random.</li>
  <li>When there are large fluctuations in data, it is up to 10x slower than BTree.</li>
</ul>

<p>Understandably, BRIN performs worse than Btree on random data and data with large fluctuations, since it cannot use the min-max values to skip blocks entirely in such data sets.</p>

<h3 id="block-size-in-brin-index">Block size in BRIN index</h3>
<p>When creating a BRIN index, we can provide the number of blocks that must be summarized in a single range.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">create</span> <span class="k">index</span> <span class="n">brin_test_idx2</span>
 <span class="k">on</span> <span class="n">brin_test</span>
<span class="k">using</span> <span class="n">BRIN</span><span class="p">(</span><span class="n">strict_inc</span><span class="p">)</span> <span class="k">with</span> <span class="p">(</span><span class="n">pages_per_range</span> <span class="o">=</span> <span class="mi">16</span><span class="p">);</span>
</code></pre></div></div>
<p>This creates a BRIN index which contains a summary entry for every 16 pages.</p>

<p>It’s important to consider the block size. The default block size is typically a good starting point, but you can experiment with different sizes to see which provides the best performance for your specific use case based on fluctuations in your data.</p>

<p>The tradeoff is that with smaller <code class="language-plaintext highlighter-rouge">pages_per_range</code> values, there will be more summary tuples, increasing the index size and the chance of heavy overlap between blocks, making the min-max summary useless, especially if the table is wide. But with larger <code class="language-plaintext highlighter-rouge">pages_per_range</code> values, there will be fewer blocks, but once a matching block is identified, we have to scan through more data to find the exact matches.</p>

<p>In conclusion, BRIN is a powerful index type for specific data patterns where the data ordering closely resembles the physical ordering of the blocks on disk. But in other cases, using normal Btree indexes will be better.</p>]]></content><author><name>Sivarama Subramanian</name><email>sivaraam1024+ghblog@gmail.com</email></author><category term="postgres" /><category term="indexing" /><category term="brin" /><summary type="html"><![CDATA[This post explains about BRIN indexes in Postgres with its pros and cons]]></summary></entry></feed>